# Copyright 2024 Khalil Estell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: üßº lint

on:
  workflow_call:
    inputs:
      library:
        required: true
        type: string
      source_dir:
        required: true
        type: string
      repo:
        required: true
        type: string
      version:
        type: string
        default: ""

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.1
        if: ${{ inputs.version != '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.version }}

      - uses: actions/checkout@v4.1.1
        if: ${{ inputs.version == '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}

      - name: üì• Install libclang-17-dev (for name style check)
        run: sudo apt install libclang-17-dev pipx

      - name: üì• Install clangd-tidy
        run: pipx install clangd-tidy

      - name: üåê Downloading .clang-format from libhal
        run: wget https://raw.githubusercontent.com/libhal/libhal/main/.clang-format -O .clang-format

      - name: üßπ Format Check `include/` directory
        id: format_include
        continue-on-error: true
        if: ${{ hashFiles('./include/') != '' }}
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "18"
          check-path: ./include
          exclude-regex: ".*/third_party/.*"

      - name: üßπ Format Check `./src/` directory
        id: format_src
        continue-on-error: true
        if: ${{ hashFiles(inputs.source_dir) != '' }}
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "18"
          check-path: ${{ inputs.source_dir }}
          exclude-regex: ".*/third_party/.*"

      - name: üßπ Format Check `./demos/` directory
        id: format_demos
        continue-on-error: true
        if: ${{ hashFiles('./demos/') != '' }}
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "18"
          check-path: ./demos/
          exclude-regex: ".*/third_party/.*"

      - name: üßπ Format Check `./tests/` code
        id: format_tests
        continue-on-error: true
        if: ${{ hashFiles('./tests/') != '' }}
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "18"
          check-path: ./tests
          exclude-regex: ".*/third_party/.*"

      - name: üîé clangd-tidy Check `./include/` directory
        id: tidy_include
        continue-on-error: true
        if: ${{ hashFiles('./include/') != '' }}
        run: clangd-tidy --query-driver="**/g++,**/*-g++" -p . include/**/*

      - name: üîé clangd-tidy `./src/` directory
        id: tidy_src
        continue-on-error: true
        if: ${{ hashFiles('./src/') != '' }}
        run: clangd-tidy --query-driver="**/g++,**/*-g++" -p . src/**/*

      - name: üîé clangd-tidy `./demos/` directory
        id: tidy_demos
        continue-on-error: true
        if: ${{ hashFiles('./demos/') != '' }}
        run: clangd-tidy --query-driver="**/g++,**/*-g++" -p . demos/**/*

      - name: üîé clangd-tidy `./tests/` code
        id: tidy_tests
        continue-on-error: true
        if: ${{ hashFiles('./tests/') != '' }}
        run: clangd-tidy --query-driver="**/g++,**/*-g++" -p . tests/**/*

      - name: Check all results and fail if any check failed
        if: always()
        run: |
          FAILED=0

          if [[ "${{ steps.format_include.outcome }}" == "failure" ]]; then
            echo "‚ùå Format check for include/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.format_src.outcome }}" == "failure" ]]; then
            echo "‚ùå Format check for src/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.format_demos.outcome }}" == "failure" ]]; then
            echo "‚ùå Format check for demos/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.format_tests.outcome }}" == "failure" ]]; then
            echo "‚ùå Format check for tests/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.tidy_include.outcome }}" == "failure" ]]; then
            echo "‚ùå Clangd-tidy check for include/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.tidy_src.outcome }}" == "failure" ]]; then
            echo "‚ùå Clangd-tidy check for src/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.tidy_demos.outcome }}" == "failure" ]]; then
            echo "‚ùå Clangd-tidy check for demos/ directory failed"
            FAILED=1
          fi

          if [[ "${{ steps.tidy_tests.outcome }}" == "failure" ]]; then
            echo "‚ùå Clangd-tidy check for tests/ directory failed"
            FAILED=1
          fi

          if [[ $FAILED -eq 1 ]]; then
            echo "One or more linting checks failed"
            exit 1
          else
            echo "‚úÖ All linting checks passed"
          fi
