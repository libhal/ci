# Copyright 2024 Khalil Estell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 🧪 tests

on:
  workflow_call:
    inputs:
      library:
        type: string
        required: true
      version:
        type: string
        default: ""
      coverage:
        type: boolean
        required: true
      fail_on_coverage:
        type: boolean
        required: true
      coverage_threshold:
        type: string
        required: true
      repo:
        type: string
        required: true
      conan_version:
        type: string
        required: true

jobs:
  run_tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            profile_path: profiles/x86_64/linux/

          - os: ubuntu-24.04
            profile_path: profiles/x86_64/linux/

          - os: macos-13
            profile_path: profiles/x86_64/mac-13/

          - os: macos-14
            profile_path: profiles/x86_64/mac-14/

          - os: macos-15
            profile_path: profiles/x86_64/mac-15/

          ## Skip already installed "git" and "mingw", uses default python
          ## 3.9.13
          #
          # - os: windows-2022
          #   installations: choco install mingw && choco install llvm --version=17.0.6 --allow-downgrade
          #   profile_path: profiles/x86_64/windows/

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: ${{ inputs.version != '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.version }}

      - uses: actions/checkout@v4.1.1
        if: ${{ inputs.version == '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}

      - name: 📥 Install OS Specific Tools (ubuntu-22.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          sudo apt remove clang-tidy
          sudo rm -f /usr/bin/clang-tidy
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 17
          sudo apt install libc++-17-dev libc++abi-17-dev
          sudo apt-get install pipx
          pipx ensurepath
          sudo apt install clang-tidy-17

      - name: 📥 Install OS Specific Tools (ubuntu-24.04)
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        run: |
          sudo apt remove clang-tidy
          sudo rm -f /usr/bin/clang-tidy
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 17
          sudo apt install libc++-17-dev libc++abi-17-dev
          sudo apt-get install pipx
          pipx ensurepath
          sudo apt install clang-tidy-17

      - name: 📥 Install OS Specific Tools (macos-13)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          brew install llvm@17
          ls $(brew --prefix llvm@17)/bin
          ln -s $(brew --prefix llvm@17)/bin/clang-tidy /usr/local/bin/
          brew install pipx
          pipx ensurepath

      - name: 📥 Install OS Specific Tools (macos-14)
        if: ${{ matrix.os == 'macos-14' }}
        run: |
          brew install llvm@17
          ln -s $(brew --prefix llvm@17)/bin/clang-tidy /usr/local/bin/
          brew install pipx
          pipx ensurepath

      - name: 📥 Install OS Specific Tools (macos-15)
        if: ${{ matrix.os == 'macos-15' }}
        run: |
          brew install llvm@17
          ln -s $(brew --prefix llvm@17)/bin/clang-tidy /usr/local/bin/
          brew install pipx
          pipx ensurepath

      - name: 📥 Install Conan ${{ inputs.conan_version }}
        run: pipx install conan==${{ inputs.conan_version }}

      - name: 🔍 conan version
        run: conan --version

      - name: 🔍 cmake version
        run: cmake --version

      - name: 🔍 clang++ version
        run: clang++-17 --version || clang++ --version

      - name: 🔍 /usr/bin version
        run: ls /usr/bin/clang*

      - name: 🔍 clang-tidy version
        run: clang-tidy-17 --version || clang-tidy --version

      - name: 📡 Add `libhal` repo to conan remotes
        run: conan remote add libhal
          https://libhal.jfrog.io/artifactory/api/conan/trunk-conan

      - name: 📡 Create and setup default profile
        run: conan profile detect --force

      - name: 👁️‍🗨️ Show conan profile (original)
        run: conan profile show

      - name: 📡 Install default profiles
        run: conan config install -sf ${{ matrix.profile_path }} -tf profiles https://github.com/libhal/conan-config.git

      - name: 👁️‍🗨️ Show conan profile (new)
        if: ${{ runner.os != 'Windows' }}
        run: cat ~/.conan2/profiles/default

      - name: 👁️‍🗨️ Show conan profile (new)
        run: conan profile show

      - name: 🔬 Create & Run Unit Tests (Windows-MinSizeRel)
        if: ${{ runner.os == 'Windows' }}
        run: $env:VERBOSE = 1 ; conan create . --build=missing -s build_type=MinSizeRel --version='latest'

      - name: 🔬 Create & Run Unit Tests (Everything_Else-MinSizeRel)
        if: ${{ runner.os != 'Windows' }}
        run: VERBOSE=1 conan create . --build=missing -s build_type=MinSizeRel --version="latest"

      # ========================================================================
      # DISABLE COVERAGE! Not sure if its worth it to support it as a part of CI
      # ========================================================================

      # - name: 🔬 Build & Run Unit Tests (for coverage Debug)
      #   if: ${{ matrix.enable_coverage }}
      #   run: VERBOSE=1 conan build . --build=missing -s build_type=Debug --version="latest"

      # - name: 📥 Install gcovr
      #   if: ${{ matrix.enable_coverage }}
      #   run: pip3 install gcovr

      # - name: 🔎 Generate Code Coverage
      #   if: ${{ matrix.enable_coverage }}
      #   working-directory: build
      #   run: |
      #     mkdir coverage/ && python3 -m gcovr --root ../../ --exclude ".*/third_party/.*" --cobertura coverage/coverage.xml --html coverage/index.html --html-details --sort-percentage

      # - name: Coverage Summary
      #   if: ${{ matrix.enable_coverage }}
      #   uses: irongut/CodeCoverageSummary@v1.3.0
      #   with:
      #     filename: build/coverage/coverage.xml
      #     badge: true
      #     fail_below_min: ${{ inputs.fail_on_coverage }}
      #     format: markdown
      #     hide_branch_rate: false
      #     hide_complexity: true
      #     indicators: true
      #     output: both
      #     thresholds: ${{ inputs.coverage_threshold }}

      # - name: Extract & Save Coverage SVG
      #   if: ${{ matrix.enable_coverage }}
      #   run: wget
      #     $(cat code-coverage-results.md |
      #     grep -Eo 'https://img.shields.io/badge/[^)]*')
      #     -O build/coverage/coverage.svg
